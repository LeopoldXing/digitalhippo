services:
  localstack:
    image: localstack/localstack:3.8
    container_name: localstack
    environment:
      - SERVICES=sns,sqs
      - DEBUG=1
      - LOCALSTACK_HOST=${LOCALSTACK_HOST}
    networks:
      - digitalhippo-prod-network

  aws-init:
    image: amazon/aws-cli
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_REGION}
    entrypoint: /bin/sh -c
    command: >
      "
      aws --endpoint-url=http://localstack:4566 sns create-topic --name digitalhippo-email-topic &&
      aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name digitalhippo-receipt-email-queue &&
      aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name digitalhippo-verification-email-queue &&
      aws --endpoint-url=http://localstack:4566 sns subscribe --topic-arn arn:aws:sns:ca-central-1:000000000000:digitalhippo-email-topic --protocol sqs --notification-endpoint arn:aws:sqs:ca-central-1:000000000000:digitalhippo-receipt-email-queue &&
      aws --endpoint-url=http://localstack:4566 sns subscribe --topic-arn arn:aws:sns:ca-central-1:000000000000:digitalhippo-email-topic --protocol sqs --notification-endpoint arn:aws:sqs:ca-central-1:000000000000:digitalhippo-verification-email-queue
      "
    networks:
      - digitalhippo-prod-network

  mongodb-dh:
    image: mongodb/mongodb-community-server:7.0.5-ubi8
    container_name: mongodb-dh
    environment:
      - MONGODB_INITDB_ROOT_USERNAME=leopold
      - MONGODB_INITDB_ROOT_PASSWORD=4532879yuewqrrhrfg432
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - digitalhippo-prod-network

  redis:
    image: redis:7.0.14
    container_name: redis-dh
    environment:
      - REDIS_PASSWORD=1234
    command: [ "redis-server", "--requirepass", "1234" ]
    restart: always
    volumes:
      - ./data/redis:/data
    networks:
      - digitalhippo-prod-network

  postgres:
    image: postgres:16.4-alpine
    container_name: postgres-dh
    environment:
      POSTGRES_PASSWORD: 1234567890
      POSTGRES_USERNAME: postgres
      POSTGRES_DB: digitalhippo
    restart: always
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - digitalhippo-prod-network

  # ELK Stack
  elasticsearch:
    container_name: elasticsearch-dh
    image: elasticsearch:8.14.1
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - digitalhippo-prod-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -I http://localhost:9200 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
  logstash:
    image: logstash:8.14.1
    container_name: logstash-dh
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - digitalhippo-prod-network
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  kibana:
    container_name: kibana-dh
    image: kibana:8.14.1
    restart: always
    ports:
      - "31404:5601"
    environment:
      - server.publicBaseUrl=${KIBANA_PUBLIC_BASE_URL}
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./data/kibana:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -I http://localhost:5601 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - digitalhippo-prod-network

  #  digitalhippo backend application
  #  eureka microservice
  eureka:
    container_name: eureka
    image: leopoldhsing2/digitalhippo.eureka
    ports:
      - "31401:8080"
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_started
      localstack:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-config

  # gateway microservice
  gateway:
    container_name: ms-gateway
    image: leopoldhsing2/digitalhippo.gateway:latest
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SESSION_DATABASE: ${REDIS_SESSION_DATABASE}
    ports:
      - "31400:8080"
    depends_on:
      eureka:
        condition: service_healthy
      redis:
        condition: service_started
    extends:
      file: common-config.yml
      service: microservice-config

  # user microservice
  user:
    container_name: ms-user
    image: leopoldhsing2/digitalhippo.user:latest
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SESSION_DATABASE: ${REDIS_SESSION_DATABASE}
      ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SNS_TOPIC_ARN: ${SNS_TOPIC_ARN}
      SNS_ENDPOINT: ${SNS_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-config

  # product microservice
  product:
    container_name: ms-product
    image: leopoldhsing2/digitalhippo.product:latest
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_CACHING_DATABASE: ${REDIS_CACHING_DATABASE}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ES_ENDPOINT: ${ES_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1g
    extends:
      file: common-config.yml
      service: microservice-config

  # stripe microservice
  stripe:
    container_name: ms-stripe
    image: leopoldhsing2/digitalhippo.stripe:latest
    environment:
      AWS_REGION: ${AWS_REGION}
      ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      SNS_TOPIC_ARN: ${SNS_TOPIC_ARN}
      SNS_ENDPOINT: ${SNS_ENDPOINT}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      FRONTEND_ENDPOINT: ${FRONTEND_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-config

  #  search microservice
  search:
    container_name: ms-search
    image: leopoldhsing2/digitalhippo.search:latest
    environment:
      ES_ENDPOINT: ${ES_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-config

  #  cart microservice
  cart:
    container_name: ms-cart
    image: leopoldhsing2/digitalhippo.cart:latest
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      eureka:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-config

  #  email microservice
  email:
    container_name: ms-email
    image: leopoldhsing2/digitalhippo.email:latest
    environment:
      AWS_REGION: ${AWS_REGION}
      ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      SQS_ENDPOINT: ${SQS_ENDPOINT}
      FRONTEND_ENDPOINT: ${FRONTEND_ENDPOINT}
      GMAIL_USERNAME: ${GMAIL_USERNAME}
      GOOGLE_APP_PASSWORD: ${GOOGLE_APP_PASSWORD}
      RECEIPT_SQS_QUEUE_NAME: ${RECEIPT_SQS_QUEUE_NAME}
      RECEIPT_SQS_QUEUE_URL: ${RECEIPT_SQS_QUEUE_URL}
      VERIFICATION_SQS_QUEUE_NAME: ${VERIFICATION_SQS_QUEUE_NAME}
      VERIFICATION_SQS_QUEUE_URL: ${VERIFICATION_SQS_QUEUE_URL}
    deploy:
      resources:
        limits:
          memory: 1g
    depends_on:
      eureka:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-config

  # operations
  prometheus:
    container_name: prometheus-dh
    image: prom/prometheus:v2.54.0
    ports:
      - "31402:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    networks:
      - digitalhippo-prod-network
  grafana:
    container_name: grafana-dh
    image: grafana/grafana:11.2.2
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - prometheus
      - gateway
    ports:
      - "31403:3000"
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./data/grafana:/var/lib/grafana
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digitalhippo-prod-network

networks:
  digitalhippo-prod-network:
    name: digitalhippo-prod-network
